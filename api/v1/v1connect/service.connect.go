// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/tsumida/lunaship/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MetaServiceName is the fully-qualified name of the MetaService service.
	MetaServiceName = "MetaService"
)

// MetaServiceClient is a client for the MetaService service.
type MetaServiceClient interface {
	GetServiceMeta(context.Context, *connect_go.Request[v1.GetServiceMetaRequest]) (*connect_go.Response[v1.GetServiceMetaResponse], error)
}

// NewMetaServiceClient constructs a client for the MetaService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetaServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MetaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &metaServiceClient{
		getServiceMeta: connect_go.NewClient[v1.GetServiceMetaRequest, v1.GetServiceMetaResponse](
			httpClient,
			baseURL+"/.MetaService/GetServiceMeta",
			opts...,
		),
	}
}

// metaServiceClient implements MetaServiceClient.
type metaServiceClient struct {
	getServiceMeta *connect_go.Client[v1.GetServiceMetaRequest, v1.GetServiceMetaResponse]
}

// GetServiceMeta calls MetaService.GetServiceMeta.
func (c *metaServiceClient) GetServiceMeta(ctx context.Context, req *connect_go.Request[v1.GetServiceMetaRequest]) (*connect_go.Response[v1.GetServiceMetaResponse], error) {
	return c.getServiceMeta.CallUnary(ctx, req)
}

// MetaServiceHandler is an implementation of the MetaService service.
type MetaServiceHandler interface {
	GetServiceMeta(context.Context, *connect_go.Request[v1.GetServiceMetaRequest]) (*connect_go.Response[v1.GetServiceMetaResponse], error)
}

// NewMetaServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetaServiceHandler(svc MetaServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/.MetaService/GetServiceMeta", connect_go.NewUnaryHandler(
		"/.MetaService/GetServiceMeta",
		svc.GetServiceMeta,
		opts...,
	))
	return "/.MetaService/", mux
}

// UnimplementedMetaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetaServiceHandler struct{}

func (UnimplementedMetaServiceHandler) GetServiceMeta(context.Context, *connect_go.Request[v1.GetServiceMetaRequest]) (*connect_go.Response[v1.GetServiceMetaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("MetaService.GetServiceMeta is not implemented"))
}
